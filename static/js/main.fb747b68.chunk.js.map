{"version":3,"sources":["logo.svg","About/index.js","About/About.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","About","props","componentWillMount","console","log","componentDidMount","componentWillReceiveProps","nextProps","componentWillUpdate","nextState","componentDidUpdate","componentWillUnmount","state","hasError","this","id","PureComponent","defaultProps","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kLAAAA,EAAOC,QAAU,IAA0B,kC,+HCE3C,E,kCCEMC,E,YACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAORC,mBAAqB,WACnBC,QAAQC,IAAI,qBATK,EAYnBC,kBAAoB,WAClBF,QAAQC,IAAI,kBAbK,EAgBnBE,0BAA4B,SAACC,GAC3BJ,QAAQC,IAAI,2BAA4BG,IAjBvB,EAoBnBC,oBAAsB,SAACD,EAAWE,GAChCN,QAAQC,IAAI,oBAAqBG,EAAWE,IArB3B,EAwBnBC,mBAAqB,WACnBP,QAAQC,IAAI,qBAzBK,EA4BnBO,qBAAuB,WACrBR,QAAQC,IAAI,uBA1BZ,EAAKQ,MAAQ,CACXC,UAAU,GAJK,E,sEAiCjB,OAAIC,KAAKF,MAAMC,SACN,qDAIL,6BACE,wBAAIE,GAAG,aAAP,aACA,odACA,wBAAIA,GAAG,oBAAP,oBACA,wBAAIA,GAAG,qBAAP,qBACA,4BACA,8DAEA,wBAAIA,GAAG,yBAAP,yBACA,4BACA,uEACA,uCACA,8CACA,oCAEA,wBAAIA,GAAG,aAAP,aACA,4BACA,6EAEA,wBAAIA,GAAG,OAAP,OACA,4BACA,uDACA,wDAEA,wBAAIA,GAAG,SAAP,SACA,4BACA,4EACA,qEACA,0DACA,yCAEA,wBAAIA,GAAG,iBAAP,iBACA,4BACA,sEAEA,wBAAIA,GAAG,sBAAP,sBACA,4BACA,yDACA,yCAEA,wBAAIA,GAAG,yCAAP,0CACA,4BACA,2EACA,0EAEA,wBAAIA,GAAG,oBAAP,oBACA,wBAAIA,GAAG,iBAAP,iBACA,4BACA,iFACA,qGACA,8CACA,+EACA,oFACA,0HAEA,wBAAIA,GAAG,qBAAP,qBACA,4BACA,mJACA,6HAEA,wBAAIA,GAAG,eAAP,eACA,4BACA,qDACA,+EACA,8CACA,4FACA,qFACA,oG,GA1GUC,iBAuHpBhB,EAAMiB,aAAe,GAINjB,QCjHAkB,MATf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.fb747b68.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import About from './About';\n\nexport default About;\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\n//import { Test } from './About.styles';\n\nclass About extends PureComponent { \n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hasError: false,\n    };\n  }\n\n  componentWillMount = () => {\n    console.log('About will mount');\n  }\n\n  componentDidMount = () => {\n    console.log('About mounted');\n  }\n\n  componentWillReceiveProps = (nextProps) => {\n    console.log('About will receive props', nextProps);\n  }\n\n  componentWillUpdate = (nextProps, nextState) => {\n    console.log('About will update', nextProps, nextState);\n  }\n\n  componentDidUpdate = () => {\n    console.log('About did update');\n  }\n\n  componentWillUnmount = () => {\n    console.log('About will unmount');\n  }\n\n  render () {\n    if (this.state.hasError) {\n      return <h1>Something went wrong.</h1>;\n    }\n    return (\n\n        <div >\n          <h2 id=\"amit-wats\">Amit Wats</h2>\n          <p>Google Cloud Professional Data Engineer with a 2+ years experience in developing applications to visualise and analyse complex data from various sources. Extensively used tools like Python, Numpy, Pandas, Scikit-learn, Power BI for data processing. In addition have used HTML5, CSS and React as front end tools. Prior to this have been in the IT industry in various roles including development and project management of complex projects.</p>\n          <h3 id=\"technical-skills\">Technical Skills</h3>\n          <h4 id=\"operating-systems\">Operating Systems</h4>\n          <ul>\n          <li>Linux(Ubuntu), Windows, MacOS</li>\n          </ul>\n          <h4 id=\"programming-languages\">Programming Languages</h4>\n          <ul>\n          <li>Python- Numpy, Pandas and Scikit Learn.</li>\n          <li>C-sharp</li>\n          <li>VBA- For Excel</li>\n          <li>SQL</li>\n          </ul>\n          <h4 id=\"databases\">Databases</h4>\n          <ul>\n          <li>Postgress, MySQL, SQLite, Oracle, SQL Server</li>\n          </ul>\n          <h4 id=\"web\">Web</h4>\n          <ul>\n          <li>HTML5, CSS, React, REST</li>\n          <li>GIMP, Inkscape, Blender</li>\n          </ul>\n          <h4 id=\"tools\">Tools</h4>\n          <ul>\n          <li>Python Development- VSCode, Jupyter Notebook</li>\n          <li>Agile- Jira, Confluence, Trello, etc.</li>\n          <li>CI/CD on Github and GitLab</li>\n          <li>Power BI</li>\n          </ul>\n          <h4 id=\"methodologies\">Methodologies</h4>\n          <ul>\n          <li>SCRUM, KANBAN, SAFe, Agile, Waterfall</li>\n          </ul>\n          <h4 id=\"data-visualisation\">Data Visualisation</h4>\n          <ul>\n          <li>Matplotlib, Excel-charts,</li>\n          <li>Power BI</li>\n          </ul>\n          <h4 id=\"data-visualisationdocumentation-tools\">Data Visualisation/Documentation tools</h4>\n          <ul>\n          <li>MS Word, MS Excel, MS PowerPoint, MS Access</li>\n          <li>Google Docs, Google Slides, Google Sheets</li>\n          </ul>\n          <h3 id=\"execution-skills\">Execution Skills</h3>\n          <h4 id=\"data-analysis\">Data Analysis</h4>\n          <ul>\n          <li>Regression analysis â€“ linear and exponential</li>\n          <li>Categorical Data Analysis using complex tools Pandas and Scikit Learn</li>\n          <li>Data Modelling</li>\n          <li>Data Cleansing- Python- Pandas and Scikit Learn</li>\n          <li>Data Visualisation- matplotlib, Plotly, Excel Charts</li>\n          <li>Data Analysis-Pareto Analysis, Hypothesis Testing, A/B testing, Pattern Recognition, etc.</li>\n          </ul>\n          <h4 id=\"business-analysis\">Business Analysis</h4>\n          <ul>\n          <li>Facilitate workshops to elicit requirements from multiple stakeholders including functional, Business and technical</li>\n          <li>Business analysis tools like Data Analysis, Process Analysis, Modelling, Flow-charting, etc.</li>\n          </ul>\n          <h4 id=\"soft-skills\">Soft Skills</h4>\n          <ul>\n          <li>Key strengths include</li>\n          <li>strong problem solving &amp; deciphering capability</li>\n          <li>analysing gaps</li>\n          <li>leveraging technical knowledge to provide optimised solution</li>\n          <li>Analytical thinking, Problem Solving, Decision Making</li>\n          <li>Negotiation Skills, Effective communication, Leadership Skills</li>\n          </ul>\n\n\n    </div>      \n    );\n  }\n}\n\nAbout.propTypes = {\n  // bla: PropTypes.string,\n};\n\nAbout.defaultProps = {\n  // bla: 'test',\n};\n\nexport default About;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport './About'\nimport About from './About/About.jsx'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <About></About>\n      </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}